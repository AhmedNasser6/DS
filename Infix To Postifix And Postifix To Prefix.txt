
/*وَمَا رَمَيْتَ إِذْ رَمَيْتَ وَلَكِنَّ اللَّهَ رَمَى وَلِيُبْلِيَ الْمُؤْمِنِينَ مِنْهُ بَلَاءً حَسَنًا إِنَّ اللَّهَ سَمِيعٌ عَلِيمٌ*/

#include         <bits/stdc++.h>
#define     ll                       long long
#define     ld                       long double
#define     ft                       first
#define     sd                       second
#define     ed                       '\n'
#define     pi                       3.141592653590
#define     sz(x)                    x.size()
#define     rall(x)                  x.rbegin(), x.rend()
#define     fixed(x)              fixed<<setprecision(x)
#define     tt                    int t;cin>>t;while(t--)
#define Nass ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

/*                     A.Nasser                      */

using namespace std;
int priority(char c){
    if(c=='-'||c=='+')
        return 1;
    else if(c=='*'||c=='/')
        return 2;
    else if(c=='^')
        return 3;
    else
        return 0;
}
string infix_to_postfix(string exp){

stack<char>stk;
string output = "";
for(int i=0;i<exp.size();i++){
    if(exp[i]==' ')continue;
    if(isdigit(exp[i])||isalpha(exp[i]))
        output +=exp[i];
    else if(exp[i]=='(')
                stk.push('(');
    else if(exp[i]==')'){
        while(stk.top()!='('){
                output +=stk.top();
                stk.pop();
              }
              stk.pop();
    }
              else
                {
                    while(!stk.empty()&&priority(exp[i])<=priority(stk.top()))
                        {
                    output +=stk.top();
              stk.pop();
              }
                stk.push(exp[i]);
              }
}
    while(!stk.empty()){
        output +=stk.top();
        stk.pop();
    }
return output;
}
//////////////////////////////postfix to prefix////////////////////////////////////////////////////////////////////
bool isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/' || c == '^');
}

string postfixToPrefix(string postfix) {
    stack<string> s;

    for (int i = 0; i < postfix.length(); i++) {
        if (isOperator(postfix[i])) {
            string op1 = s.top();
            s.pop();
            string op2 = s.top();
            s.pop();
            string prefix = postfix[i] + op2 + op1;
            s.push(prefix);
        }
        else {
            string operand(1, postfix[i]);
            s.push(operand);
        }
    }

    return s.top();
}

int main(){
string x;
cin>>x;
cout<<infix_to_postfix(x)<<"\n";
string s=infix_to_postfix(x);

cout<<postfixToPrefix(s);
return 0;

}




