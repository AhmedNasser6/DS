#include <bits/stdc++.h>
#include <stack>
#include <cassert>
/*                     A.Nasser                      */
using namespace std;
const int MAX_SIZE=100;
template <class t>
class arrayQueueTyoe{
int rear;
int front;
int count;
t *arr;//dynamic array not need to Max_SIZE
int maxsize;
public:
arrayQueueTyoe(int size)
{
    if(size<=0)
    maxsize=100;//تجنب السالب
else
    maxsize=size;
front=0;
arr=new t[maxsize];//dynamic array
rear=maxsize-1;
count=0;
}

bool isEmpty(){
return count==0;
}

bool isFull(){
return count==maxsize;
}

void enqueue(t e){
if(isFull()){
    cout<<"Queue is Full can not Enquque ....!";

      }
      else
        rear=(rear+1)%maxsize;
      arr[rear]=e;
      count++;
}

void dequeue(){
if(isEmpty())
    {
    cout<<"Queue is Empty can not Dequque ....!";

      }
      else
        front=(front+1)%maxsize;
      --count;

}

int Frontqueue(){
if(isEmpty())//or assert(!isEmpty());
    cout<<"Queue is Empty can not Dequque ....!";
else
return arr[front];

}

int rearqueue(){
//if(isEmpty())
 assert(!isEmpty());
    //cout<<"Queue is Empty can not Dequque ....!";
return arr[rear];

}
void print(){
    if(!isEmpty()){
for(int i=front; i!=rear+1;i=(i+1)%maxsize)
{

    cout<<arr[i]<<" ";
}
cout<<"\n";
}
}

int QueueSearch(t element){
    int pos=-1;
    if(!isEmpty())
    {
for(int i=front; i!=rear+1;i=(i+1)%MAX_SIZE)
if(arr[i]==element){
    pos=i;
    break;
    }

    }
else
    cout<<"Queue is Empty !"<<endl;

return pos;

}

};
int main(){
arrayQueueTyoe<char>q1(5);
q1.enqueue('a');
q1.enqueue('b');
q1.enqueue('c');
q1.enqueue('d');

q1.dequeue();
q1.print();

cout<<q1.QueueSearch('b')<<endl;


}
